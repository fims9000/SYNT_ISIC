"""
Logger - —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ISIC Generator
"""

import logging
import logging.handlers
import os
from datetime import datetime
from typing import Optional, Dict, Any
from pathlib import Path

class Logger:
    """–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ISIC Generator"""
    
    def __init__(self, name: str = "ISICGenerator", log_dir: str = "core/logs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        """
        self.name = name
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.logger.handlers.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._setup_formatters()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self._setup_handlers()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
        self.special_loggers = {}
        
    def _setup_formatters(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.detailed_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        self.simple_formatter = logging.Formatter(
            '%(levelname)s - %(message)s'
        )
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è GUI
        self.gui_formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%H:%M:%S'
        )
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞"""
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        main_log_file = self.log_dir / "generator.log"
        main_handler = logging.handlers.RotatingFileHandler(
            main_log_file,
            maxBytes=10*1024*1024,  # 10 MB
            backupCount=5,
            encoding='utf-8'
        )
        main_handler.setLevel(logging.DEBUG)
        main_handler.setFormatter(self.detailed_formatter)
        self.logger.addHandler(main_handler)
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(self.simple_formatter)
        self.logger.addHandler(console_handler)
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
        error_log_file = self.log_dir / "errors.log"
        error_handler = logging.handlers.RotatingFileHandler(
            error_log_file,
            maxBytes=5*1024*1024,  # 5 MB
            backupCount=3,
            encoding='utf-8'
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(self.detailed_formatter)
        self.logger.addHandler(error_handler)
        
        # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è GUI (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∑–∂–µ)
        self.gui_handler = None
    
    def setup_gui_handler(self, text_widget):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ GUI
        
        Args:
            text_widget: –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ (QTextEdit)
        """
        from PyQt5.QtCore import QObject, pyqtSignal
        
        class QTextEditHandler(logging.Handler, QObject):
            log_message = pyqtSignal(str)
            
            def __init__(self, text_widget):
                logging.Handler.__init__(self)
                QObject.__init__(self)
                self.text_widget = text_widget
                self.log_message.connect(self._append_log)
            
            def emit(self, record):
                msg = self.format(record)
                self.log_message.emit(msg)
            
            def _append_log(self, message):
                if hasattr(self.text_widget, 'append'):
                    self.text_widget.append(message)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π GUI —Ö–µ–Ω–¥–ª–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.gui_handler:
            self.logger.removeHandler(self.gui_handler)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π GUI —Ö–µ–Ω–¥–ª–µ—Ä
        self.gui_handler = QTextEditHandler(text_widget)
        self.gui_handler.setLevel(logging.INFO)
        self.gui_handler.setFormatter(self.gui_formatter)
        self.logger.addHandler(self.gui_handler)
    
    def get_special_logger(self, name: str, log_file: str = None) -> logging.Logger:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            log_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        if name in self.special_loggers:
            return self.special_loggers[name]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        special_logger = logging.getLogger(f"{self.name}.{name}")
        special_logger.setLevel(logging.DEBUG)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        if log_file:
            log_path = self.log_dir / log_file
            handler = logging.handlers.RotatingFileHandler(
                log_path,
                maxBytes=5*1024*1024,  # 5 MB
                backupCount=3,
                encoding='utf-8'
            )
            handler.setLevel(logging.DEBUG)
            handler.setFormatter(self.detailed_formatter)
            special_logger.addHandler(handler)
        
        self.special_loggers[name] = special_logger
        return special_logger
    
    def log_generation_start(self, class_name: str, count: int, output_dir: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞: {class_name} x{count} -> {output_dir}")
    
    def log_generation_progress(self, class_name: str, current: int, total: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        percentage = (current / total) * 100
        self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å {class_name}: {current}/{total} ({percentage:.1f}%)")
    
    def log_generation_complete(self, class_name: str, count: int, output_dir: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {class_name} x{count} -> {output_dir}")
    
    def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É"""
        error_msg = f"–û–®–ò–ë–ö–ê {context}: {str(error)}"
        self.logger.error(error_msg, exc_info=True)
    
    def log_warning(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.logger.warning(f"‚ö†Ô∏è  {message}")
    
    def log_info(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.info(f"–ò–ù–§–û: {message}")
    
    def log_debug(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.logger.debug(f"üîç {message}")
    
    def log_success(self, message: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        self.logger.info(f"–£–°–ü–ï–•: {message}")
    
    def log_config_change(self, setting: str, old_value: Any, new_value: Any):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: {setting} = {old_value} -> {new_value}")
    
    def log_model_loaded(self, class_name: str, model_path: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏"""
        self.logger.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {class_name} <- {model_path}")
    
    def log_model_error(self, class_name: str, error: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {class_name}: {error}")
    
    def cleanup_old_logs(self, days_to_keep: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"""
        try:
            cutoff_date = datetime.now().timestamp() - (days_to_keep * 24 * 3600)
            
            for log_file in self.log_dir.glob("*.log*"):
                if log_file.stat().st_mtime < cutoff_date:
                    log_file.unlink()
                    self.logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file.name}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")
    
    def get_log_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ª–æ–≥–∞–º"""
        try:
            main_log_file = self.log_dir / "generator.log"
            if not main_log_file.exists():
                return {"error": "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ —É—Ä–æ–≤–Ω—è–º
            level_counts = {"INFO": 0, "WARNING": 0, "ERROR": 0, "DEBUG": 0}
            
            with open(main_log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    for level in level_counts:
                        if f" - {level} - " in line:
                            level_counts[level] += 1
                            break
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_mb = main_log_file.stat().st_size / (1024 * 1024)
            
            return {
                "total_lines": sum(level_counts.values()),
                "level_counts": level_counts,
                "file_size_mb": round(file_size_mb, 2),
                "last_modified": datetime.fromtimestamp(main_log_file.stat().st_mtime).isoformat()
            }
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ª–æ–≥–æ–≤: {e}"}
    
    def set_level(self, level: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        level_map = {
            "DEBUG": logging.DEBUG,
            "INFO": logging.INFO,
            "WARNING": logging.WARNING,
            "ERROR": logging.ERROR,
            "CRITICAL": logging.CRITICAL
        }
        
        if level.upper() in level_map:
            self.logger.setLevel(level_map[level.upper()])
            self.log_info(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {level.upper()}")
        else:
            self.log_warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {level}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã"""
        for handler in self.logger.handlers[:]:
            handler.close()
            self.logger.removeHandler(handler)
        
        for special_logger in self.special_loggers.values():
            for handler in special_logger.handlers[:]:
                handler.close()
                special_logger.removeHandler(handler)
