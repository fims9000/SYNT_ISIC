#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ISIC Diffusion Generator v3.0 –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
–ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ GUI
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π ~/MaxYura
"""

import os
import sys
import argparse
import torch
from pathlib import Path
from typing import List, Optional

# –†–∞–±–æ—á–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∫–∞–∫ –≤ generate_test.py
from diffusers import UNet2DModel, DDPMScheduler
from PIL import Image
import numpy as np
from tqdm import tqdm
import json
import csv
import re

print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")


class ConsoleGenerator:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ISIC –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º –∏ –¥–∞–Ω–Ω—ã–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–∫–∞–∫ –≤ generate_test.py)
        self.base_dir = os.path.expanduser('~/MaxYura')
        self.checkpoint_dir = os.path.join(self.base_dir, 'checkpoints')
        self.output_dir = os.path.join(self.base_dir, 'generated_images')
        self.stats_path = os.path.join(self.base_dir, 'checkpoints', 'color_statistics.json')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ generate_test.py)
        self.image_size = 128
        self.train_timesteps = 1000
        self.inference_timesteps = 1000
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞
        os.makedirs(self.output_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ ISIC2018
        self.synthetic_dir = os.path.join(self.base_dir, 'ISIC2018_Task3_synt')
        self.synthetic_csv = os.path.join(self.base_dir, 'ISIC2018_Task3_GroundTruth_synt.csv')
        self.last_isic_number = 34320  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        os.makedirs(self.synthetic_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.color_stats = self._load_color_statistics()
        
        print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        print(f"üìÅ –ß–µ–∫–ø–æ–∏–Ω—Ç—ã: {self.checkpoint_dir}")
        print(f"üìÅ –í—ã–≤–æ–¥: {self.output_dir}")
        print(f"üìÅ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {self.synthetic_dir}")
        print(f"üìÑ CSV –º–µ—Ç–∫–∏: {self.synthetic_csv}")
        print(f"üî¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä ISIC: {self.last_isic_number}")
        if self.color_stats:
            print(f"üé® –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(self.color_stats)} –∫–ª–∞—Å—Å–æ–≤)")
        else:
            print(f"‚ö†Ô∏è  –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _load_color_statistics(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if os.path.exists(self.stats_path):
                with open(self.stats_path, 'r') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {e}")
        return None
    
    def _get_next_isic_number(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä ISIC –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        self.last_isic_number += 1
        return self.last_isic_number
    
    def _create_isic_filename(self, isic_number):
        """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISIC"""
        return f"ISIC_{isic_number:07d}.jpg"
    
    def _get_class_columns(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è CSV"""
        return ['MEL', 'NV', 'BCC', 'AKIEC', 'BKL', 'DF', 'VASC']
    
    def _create_csv_header(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV —Ñ–∞–π–ª–∞"""
        columns = ['image'] + self._get_class_columns()
        return columns
    
    def _create_csv_row(self, image_name, class_name):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É CSV –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        columns = self._get_class_columns()
        row = [image_name] + [0.0] * len(columns)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1.0 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
        if class_name in columns:
            class_index = columns.index(class_name)
            row[class_index + 1] = 1.0
        
        return row
    
    def _initialize_synthetic_csv(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        if not os.path.exists(self.synthetic_csv):
            with open(self.synthetic_csv, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(self._create_csv_header())
            print(f"üìÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª: {self.synthetic_csv}")
        else:
            print(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CSV —Ñ–∞–π–ª: {self.synthetic_csv}")
    
    def _append_to_csv(self, image_name, class_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ CSV —Ñ–∞–π–ª"""
        try:
            with open(self.synthetic_csv, 'a', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                row = self._create_csv_row(image_name, class_name)
                writer.writerow(row)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ CSV: {e}")
    
    def _apply_color_postprocessing(self, image, class_name):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
        if not self.color_stats or class_name not in self.color_stats:
            return image
        
        try:
            stats = self.color_stats[class_name]
            
            if "rgb" not in stats or "mean" not in stats["rgb"]:
                print(f"  ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}")
                return image
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RGB –¥–ª—è –∫–ª–∞—Å—Å–∞
            target_mean = stats["rgb"]["mean"]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ numpy array –µ—Å–ª–∏ —ç—Ç–æ PIL Image
            if hasattr(image, 'convert'):
                img_array = np.array(image)
            else:
                img_array = image
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_mean = np.mean(img_array, axis=(0, 1))
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            correction = np.array(target_mean) - current_mean
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
            corrected_array = np.clip(img_array + correction, 0, 255).astype(np.uint8)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL Image –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –±—ã–ª–æ PIL
            if hasattr(image, 'convert'):
                corrected_image = Image.fromarray(corrected_array)
                return corrected_image
            else:
                return corrected_array
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {class_name}: {e}")
            return image
    
    def _get_available_models(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        models = {}
        if os.path.exists(self.checkpoint_dir):
            for file in os.listdir(self.checkpoint_dir):
                if file.endswith('.pth') and file.startswith('unet_') and file.endswith('_best.pth'):
                    class_name = file[5:-9]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    models[class_name] = os.path.join(self.checkpoint_dir, file)
        return models
    
    def get_available_classes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
        models = self._get_available_models()
        return list(models.keys())
    
    def get_model_info(self, class_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        models = self._get_available_models()
        if class_name in models:
            return {
                'class_name': class_name,
                'checkpoint_path': models[class_name],
                'device': str(self.device)
            }
        return None
    
    def show_available_classes(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        models = self._get_available_models()
        if not models:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            return
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print("=" * 40)
        for i, (class_name, checkpoint_path) in enumerate(models.items(), 1):
            print(f"{i:2d}. {class_name:8s} - {checkpoint_path}")
        print("=" * 40)
        print(f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(models)}")
    
    def generate_single_image(self, class_name: str, output_path: str, postprocess: bool = True):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
        models = self._get_available_models()
        if class_name not in models:
            raise ValueError(f"–ö–ª–∞—Å—Å {class_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        checkpoint_path = models[class_name]
        print(f"üé® –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}: {checkpoint_path}")
        
        # –ò–¥–µ–Ω—Ç–∏—á–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ generate_test.py)
        model = UNet2DModel(
            sample_size=self.image_size,
            in_channels=3,
            out_channels=3,
            layers_per_block=2,
            block_out_channels=(64, 128, 256, 256),
            down_block_types=(
                "DownBlock2D",
                "DownBlock2D",
                "AttnDownBlock2D",  # Attention –±–ª–æ–∫
                "DownBlock2D"
            ),
            up_block_types=(
                "UpBlock2D",
                "AttnUpBlock2D",  # Attention –±–ª–æ–∫
                "UpBlock2D",
                "UpBlock2D"
            ),
            class_embed_type=None,
        ).to(self.device)

        model.load_state_dict(torch.load(checkpoint_path, map_location=self.device))
        model.eval()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scheduler –∏–¥–µ–Ω—Ç–∏—á–Ω–∞—è –æ–±—É—á–µ–Ω–∏—é (–∫–∞–∫ –≤ generate_test.py)
        scheduler = DDPMScheduler(
            num_train_timesteps=self.train_timesteps,
            beta_schedule="squaredcos_cap_v2",
            prediction_type="epsilon"
        )
        
        scheduler.set_timesteps(self.inference_timesteps, device=self.device)

        with torch.no_grad():
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
            sample = torch.randn(1, 3, self.image_size, self.image_size, device=self.device)

            # –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ generate_test.py)
            for t in tqdm(scheduler.timesteps, desc=f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {class_name}"):
                noise_pred = model(sample, t).sample
                sample = scheduler.step(noise_pred, t, sample).prev_sample

            # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            image = sample.clamp(-1, 1)
            image = (image + 1) * 0.5
            image = image.cpu().permute(0, 2, 3, 1).numpy()[0]
            image = (image * 255).astype(np.uint8)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if postprocess:
                print(f"  üîß –ü—Ä–∏–º–µ–Ω—è—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤ –¥–ª—è {class_name}")
                image = self._apply_color_postprocessing(image, class_name)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ)
            img_pil = Image.fromarray(image)
            img_pil.save(output_path, 'JPEG', quality=95)
            
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            del sample, image, img_pil
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
    
    def generate_images(self, class_names: List[str], count: int, 
                       output_dir: Optional[str] = None, postprocess: bool = True):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        
        Args:
            class_names: –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
            postprocess: –ü—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class_configs = [(class_name, count) for class_name in class_names]
        self.generate_images_with_configs(class_configs, output_dir, postprocess)
    
    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ISIC Diffusion Generator")
        print("=" * 50)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
            print("2. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print("3. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
            
            if choice == "1":
                self.show_available_classes()
                
            elif choice == "2":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                self.show_available_classes()
                
                # –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                class_configs = self._get_class_configs_interactive()
                
                if not class_configs:
                    print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª–∞—Å—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    continue
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞
                output_dir = input("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞ (Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π): ").strip()
                if not output_dir:
                    output_dir = None
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É
                postprocess_input = input("–ü—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
                postprocess = postprocess_input != 'n'
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                self.generate_images_with_configs(class_configs, output_dir, postprocess)
                
            elif choice == "3":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
    
    def _get_class_configs_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        class_configs = []
        available_classes = self.get_available_classes()
        
        print(f"\nüìù –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(available_classes)}")
        print(f"üí° –í–≤–µ–¥–∏—Ç–µ 'start' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        print("=" * 60)
        
        while True:
            print(f"\nüìä –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {len(class_configs)} –∫–ª–∞—Å—Å–æ–≤")
            if class_configs:
                for i, (cls, count) in enumerate(class_configs, 1):
                    print(f"  {i}. {cls}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å
            class_input = input(f"\n–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å (–∏–ª–∏ 'start'/'cancel'): ").strip()
            
            if class_input.lower() == 'start':
                if not class_configs:
                    print("‚ùå –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª–∞—Å—Å.")
                    continue
                break
            elif class_input.lower() == 'cancel':
                print("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            if class_input not in available_classes:
                print(f"‚ùå –ö–ª–∞—Å—Å '{class_input}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(available_classes)}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
            if any(cls == class_input for cls, _ in class_configs):
                print(f"‚ö†Ô∏è  –ö–ª–∞—Å—Å '{class_input}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
                continue
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞
            while True:
                try:
                    count_input = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ '{class_input}': ").strip()
                    count = int(count_input)
                    if count <= 0:
                        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                        continue
                    break
                except ValueError:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            class_configs.append((class_input, count))
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å '{class_input}' —Å {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        
        print(f"\nüéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        for i, (cls, count) in enumerate(class_configs, 1):
            print(f"  {i}. {cls}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return class_configs
    
    def generate_images_with_configs(self, class_configs, output_dir=None, postprocess=True):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∫–ª–∞—Å—Å–æ–≤
        
        Args:
            class_configs: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (class_name, count)
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            postprocess: –ü—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Ü–≤–µ—Ç–æ–≤
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–∞
        if output_dir:
            output_path = Path(output_dir)
        else:
            output_path = Path(self.synthetic_dir)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        output_path.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
        self._initialize_synthetic_csv()
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {output_path}")
        print(f"üîß –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if postprocess else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        print(f"üìÑ CSV —Ñ–∞–π–ª: {self.synthetic_csv}")
        
        total_generated = 0
        
        for class_name, count in class_configs:
            if class_name not in self.get_available_classes():
                print(f"‚ö†Ô∏è  –ö–ª–∞—Å—Å {class_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            print(f"\nüé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞: {class_name}")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π ISIC
                for i in range(count):
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä ISIC
                    isic_number = self._get_next_isic_number()
                    isic_filename = self._create_isic_filename(isic_number)
                    output_file = output_path / isic_filename
                    
                    print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É—é {i + 1}/{count}: {isic_filename}")
                    
                    self.generate_single_image(class_name, str(output_file), postprocess)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV
                    self._append_to_csv(isic_filename, class_name)
                    
                    total_generated += 1
                
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {class_name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_name}: {e}")
                continue
        
        print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_generated}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        print(f"üìÑ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {self.synthetic_csv}")
        print(f"üî¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä ISIC: {self.last_isic_number}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="ISIC Diffusion Generator v3.0 - –ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤)
  python console_generator_server.py --classes MEL,NV --count 5
  python console_generator_server.py --classes all --count 10 --output ./my_images
  
  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞)
  python console_generator_server.py --class-counts "MEL:50,BCC:120,NV:30"
  python console_generator_server.py --class-counts "MEL:25,NV:100" --output ./custom_images
  
  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  python console_generator_server.py --interactive
        """
    )
    
    parser.add_argument(
        '--classes', '-c',
        type=str,
        help='–ö–ª–∞—Å—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ "all" –¥–ª—è –≤—Å–µ—Ö)'
    )
    
    parser.add_argument(
        '--count', '-n',
        type=int,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –∫–ª–∞—Å—Å)'
    )
    
    parser.add_argument(
        '--class-counts', '-cc',
        type=str,
        help='–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ñ–æ—Ä–º–∞—Ç: "MEL:50,BCC:120,NV:30")'
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    )
    
    parser.add_argument(
        '--no-postprocess',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    )
    
    parser.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º'
    )
    
    parser.add_argument(
        '--list-classes', '-l',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –≤—ã–π—Ç–∏'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = ConsoleGenerator()
    
    if args.list_classes:
        generator.show_available_classes()
        return
    
    if args.interactive:
        generator.run_interactive()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not args.classes and not args.class_counts:
        print("‚ùå –î–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã --classes –∏–ª–∏ --class-counts")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ --interactive –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–æ–≤
    if args.class_counts:
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏–¥–∞ "MEL:50,BCC:120,NV:30"
        try:
            class_configs = []
            for item in args.class_counts.split(','):
                if ':' in item:
                    class_name, count_str = item.split(':', 1)
                    class_name = class_name.strip()
                    count = int(count_str.strip())
                    if count <= 0:
                        raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {class_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                    class_configs.append((class_name, count))
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {item}")
                    return
            
            if not class_configs:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–æ–≤")
                return
            
            print("üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤:")
            for cls, count in class_configs:
                print(f"  {cls}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
            generator.generate_images_with_configs(
                class_configs=class_configs,
                output_dir=args.output,
                postprocess=not args.no_postprocess
            )
            return
            
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤: {e}")
            return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: --classes + --count
    if not args.count:
        print("‚ùå –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ --classes —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --count")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã
    if args.classes.lower() == 'all':
        class_names = generator.get_available_classes()
    else:
        class_names = [c.strip() for c in args.classes.split(',') if c.strip()]
    
    if not class_names:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generator.generate_images(
        class_names=class_names,
        count=args.count,
        output_dir=args.output,
        postprocess=not args.no_postprocess
    )


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)






